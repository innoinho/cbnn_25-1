{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPSwwVHTvPB9zYEPCLwk0Nw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Homework#1\n","- 수업시간에 배운 내용과 실습한 코드들을 이용해서 아래 내용에 대한 코드를 작성하고, 코드와 결과를 넣은 보고서를 제출하시오.\n","\n","0. MNIST 데이터를 읽고, 70%는 학습데이터, 30%는 데스트데이터로 구분(dataloader)하시오.\n","\n","1. Hidden layer가 2개이고, 각 node는 20개인 MLP 모델(model)을 구현하시오.\n","\n","2. 활성화함수를 ReLU와 Sigmoid로 바꿔서 테스트결과를 출력하시오.\n","\n","3. Batch normalization을 적용했을 때와 하지 않았을 때의 결과를 출력하시오.\n","\n","4. 카이밍 초기화, 제이비어 초기화, 정규분포 초기화를 적용했을 때의 결과를 출력하시오."],"metadata":{"id":"EJoPEebn6Xv-"}},{"cell_type":"markdown","source":["라이브러리 import"],"metadata":{"id":"qTzCqDIP6-X-"}},{"cell_type":"code","source":["import torch\n","import torch.optim as optim\n","from torchvision import datasets, transforms\n","from torch.utils.data import DataLoader, random_split"],"metadata":{"id":"dhtmHEPgABDF","executionInfo":{"status":"ok","timestamp":1744272201117,"user_tz":-540,"elapsed":7,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":78,"outputs":[]},{"cell_type":"markdown","source":["데이터 전처리 및 다운로드"],"metadata":{"id":"CBMm2LtPAOsa"}},{"cell_type":"code","source":["# 데이터 변환 정의\n","transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5,), (0.5,))\n","])\n","\n","# MNIST 데이터 다운로드\n","mnist_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)"],"metadata":{"id":"yoDu2_o7AZ9i","executionInfo":{"status":"ok","timestamp":1744272203056,"user_tz":-540,"elapsed":229,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":79,"outputs":[]},{"cell_type":"markdown","source":["0. 데이터 분할( 70% 학습, 30% 테스트)"],"metadata":{"id":"4h0HYcOAAyBK"}},{"cell_type":"code","source":["# 전체 데이터 수\n","total_size = len(mnist_dataset)\n","train_size = int(total_size * 0.7)\n","test_size = total_size - train_size\n","\n","# 데이터 분할\n","train_dataset, test_dataset = random_split(mnist_dataset, [train_size, test_size])"],"metadata":{"id":"8RrfDS4XArKL","executionInfo":{"status":"ok","timestamp":1744272204640,"user_tz":-540,"elapsed":7,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":80,"outputs":[]},{"cell_type":"markdown","source":["DataLoader 구성"],"metadata":{"id":"epDMnFGVBQT5"}},{"cell_type":"code","source":["train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n","test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)"],"metadata":{"id":"cil8Znv_BTpo","executionInfo":{"status":"ok","timestamp":1744272205992,"user_tz":-540,"elapsed":7,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":81,"outputs":[]},{"cell_type":"markdown","source":["DataLoader 작동 확인"],"metadata":{"id":"vhwfWUy3BXCa"}},{"cell_type":"code","source":["# 데이터 로더에서 하나의 배치를 가져오기\n","images, labels = next(iter(train_loader))\n","print(f\"이미지 배치 크기: {images.shape}\")\n","print(f\"레이블 배치 크기: {labels.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pyCpWGVTBdNj","executionInfo":{"status":"ok","timestamp":1744272207191,"user_tz":-540,"elapsed":26,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}},"outputId":"3fe73d7f-aad1-4d7c-b8a0-5ebf1b5c0c14"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["이미지 배치 크기: torch.Size([64, 1, 28, 28])\n","레이블 배치 크기: torch.Size([64])\n"]}]},{"cell_type":"markdown","source":["1. MLP 모델 구현 (PyTorch) - Hidden layer가 2개이고, 각 node는 20개인 MLP 모델(model)"],"metadata":{"id":"lK7MnIzKB6FQ"}},{"cell_type":"code","source":["import torch.nn as nn\n","\n","class MLPModel(nn.Module):\n","    def __init__(self):\n","        super(MLPModel, self).__init__()\n","        self.model = nn.Sequential(\n","            nn.Flatten(),                # 입력 이미지 (1x28x28)를 784차원 벡터로 변환\n","            nn.Linear(28*28, 20),        # 입력층 → 첫 번째 은닉층\n","            nn.ReLU(),                   # 비선형 활성화 함수\n","            nn.Linear(20, 20),           # 첫 번째 은닉층 → 두 번째 은닉층\n","            nn.ReLU(),\n","            nn.Linear(20, 10)            # 두 번째 은닉층 → 출력층 (MNIST는 클래스 10개)\n","        )\n","\n","    def forward(self, x):\n","        return self.model(x)"],"metadata":{"id":"e8y5_j6yB74P","executionInfo":{"status":"ok","timestamp":1744272208764,"user_tz":-540,"elapsed":1,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":83,"outputs":[]},{"cell_type":"markdown","source":["모델 구조 출력"],"metadata":{"id":"q6ckYGKvNd4m"}},{"cell_type":"code","source":["model = MLPModel()\n","print(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gDJOTTfbNgSM","executionInfo":{"status":"ok","timestamp":1744272211097,"user_tz":-540,"elapsed":48,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}},"outputId":"a20601f9-52f6-41ff-c565-eb8f94efc1d7"},"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["MLPModel(\n","  (model): Sequential(\n","    (0): Flatten(start_dim=1, end_dim=-1)\n","    (1): Linear(in_features=784, out_features=20, bias=True)\n","    (2): ReLU()\n","    (3): Linear(in_features=20, out_features=20, bias=True)\n","    (4): ReLU()\n","    (5): Linear(in_features=20, out_features=10, bias=True)\n","  )\n",")\n"]}]},{"cell_type":"markdown","source":["MLP 모델 정의 함수 (활성화 함수 선택 가능)"],"metadata":{"id":"N4RpvT7JNq3Y"}},{"cell_type":"code","source":["class MLPModel(nn.Module):\n","    def __init__(self, activation_fn):\n","        super(MLPModel, self).__init__()\n","        self.model = nn.Sequential(\n","            nn.Flatten(),\n","            nn.Linear(28*28, 20),\n","            activation_fn(),\n","            nn.Linear(20, 20),\n","            activation_fn(),\n","            nn.Linear(20, 10)\n","        )\n","\n","    def forward(self, x):\n","        return self.model(x)"],"metadata":{"id":"SkOJs54DNwlK","executionInfo":{"status":"ok","timestamp":1744272212631,"user_tz":-540,"elapsed":4,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":85,"outputs":[]},{"cell_type":"markdown","source":["모델 학습 및 테스트 함수"],"metadata":{"id":"mmhILEMpPkOL"}},{"cell_type":"code","source":["def train_model(model, train_loader, optimizer, criterion, device, epochs=3):\n","    model.train()\n","    for epoch in range(epochs):\n","        running_loss = 0.0\n","        for images, labels in train_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            running_loss += loss.item()\n","        print(f\"Epoch [{epoch+1}/{epochs}] - Loss: {running_loss:.4f}\")\n"],"metadata":{"id":"1XjAwKjDN6YW","executionInfo":{"status":"ok","timestamp":1744272214753,"user_tz":-540,"elapsed":10,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":86,"outputs":[]},{"cell_type":"markdown","source":["2. ReLU 함수와 Sigmoid 함수 테스트"],"metadata":{"id":"iTT6TdkCPoKa"}},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","criterion = nn.CrossEntropyLoss()\n","\n","# ReLU 모델\n","relu_model = MLPModel(nn.ReLU).to(device)\n","relu_optimizer = optim.Adam(relu_model.parameters(), lr=0.001)\n","print(\"▶ ReLU 모델 학습 시작\")\n","train_model(relu_model, train_loader, relu_optimizer, criterion, device, epochs=3)\n","relu_accuracy = test_model(relu_model, test_loader, device)\n","\n","# Sigmoid 모델\n","sigmoid_model = MLPModel(nn.Sigmoid).to(device)\n","sigmoid_optimizer = optim.Adam(sigmoid_model.parameters(), lr=0.001)\n","print(\"\\n▶ Sigmoid 모델 학습 시작\")\n","train_model(sigmoid_model, train_loader, sigmoid_optimizer, criterion, device, epochs=3)\n","sigmoid_accuracy = test_model(sigmoid_model, test_loader, device)\n","\n","# 결과 출력\n","print(\"\\n▶ 테스트 정확도 결과\")\n","print(f\"ReLU 모델 정확도: {relu_accuracy:.2f}%\")\n","print(f\"Sigmoid 모델 정확도: {sigmoid_accuracy:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oJuqyu_7N3Zn","executionInfo":{"status":"ok","timestamp":1744272287572,"user_tz":-540,"elapsed":69761,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}},"outputId":"15862791-b9df-4c61-90eb-692908df4704"},"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["▶ ReLU 모델 학습 시작\n","Epoch [1/3] - Loss: 484.9865\n","Epoch [2/3] - Loss: 242.7171\n","Epoch [3/3] - Loss: 214.9632\n","\n","▶ Sigmoid 모델 학습 시작\n","Epoch [1/3] - Loss: 1044.0774\n","Epoch [2/3] - Loss: 434.9452\n","Epoch [3/3] - Loss: 286.8434\n","\n","▶ 테스트 정확도 결과\n","ReLU 모델 정확도: 90.78%\n","Sigmoid 모델 정확도: 89.09%\n"]}]},{"cell_type":"markdown","source":["Batch Normalization을 위한 MLP 모델 정의"],"metadata":{"id":"4BTnJGVxXdBt"}},{"cell_type":"code","source":["class MLPModel(nn.Module):\n","    def __init__(self, activation_fn, use_batchnorm=False):\n","        super(MLPModel, self).__init__()\n","        layers = [nn.Flatten()]\n","\n","        layers.append(nn.Linear(28*28, 20))\n","        if use_batchnorm:\n","            layers.append(nn.BatchNorm1d(20))  # 배치 정규화 추가\n","        layers.append(activation_fn())\n","\n","        layers.append(nn.Linear(20, 20))\n","        if use_batchnorm:\n","            layers.append(nn.BatchNorm1d(20))  # 배치 정규화 추가\n","        layers.append(activation_fn())\n","\n","        layers.append(nn.Linear(20, 10))\n","\n","        self.model = nn.Sequential(*layers)\n","\n","    def forward(self, x):\n","        return self.model(x)"],"metadata":{"id":"_jRVGmU2SqQQ","executionInfo":{"status":"ok","timestamp":1744272291709,"user_tz":-540,"elapsed":8,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":88,"outputs":[]},{"cell_type":"markdown","source":["모델 학습 및 테스트 함수"],"metadata":{"id":"VnYBTl7PXoGC"}},{"cell_type":"code","source":["def train_model(model, train_loader, optimizer, criterion, device, epochs=3):\n","    model.train()\n","    for epoch in range(epochs):\n","        running_loss = 0.0\n","        for images, labels in train_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            running_loss += loss.item()\n","        print(f\"Epoch [{epoch+1}/{epochs}] - Loss: {running_loss:.4f}\")\n","\n","def test_model(model, test_loader, device):\n","    model.eval()\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for images, labels in test_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","    return 100 * correct / total"],"metadata":{"id":"_nd_ct_HSuYF","executionInfo":{"status":"ok","timestamp":1744272293602,"user_tz":-540,"elapsed":9,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":89,"outputs":[]},{"cell_type":"markdown","source":[" 3. BatchNorm 미적용 과 적용 모델 결과 비교"],"metadata":{"id":"A868-4Y6X67T"}},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","criterion = nn.CrossEntropyLoss()\n","\n","# BatchNorm 미적용 모델\n","print(\"▶ BatchNorm 미적용 모델 학습\")\n","plain_model = MLPModel(nn.ReLU, use_batchnorm=False).to(device)\n","plain_optimizer = optim.Adam(plain_model.parameters(), lr=0.001)\n","train_model(plain_model, train_loader, plain_optimizer, criterion, device, epochs=3)\n","plain_accuracy = test_model(plain_model, test_loader, device)\n","\n","# BatchNorm 적용 모델\n","print(\"\\n▶ BatchNorm 적용 모델 학습\")\n","bn_model = MLPModel(nn.ReLU, use_batchnorm=True).to(device)\n","bn_optimizer = optim.Adam(bn_model.parameters(), lr=0.001)\n","train_model(bn_model, train_loader, bn_optimizer, criterion, device, epochs=3)\n","bn_accuracy = test_model(bn_model, test_loader, device)\n","\n","# 결과 비교 출력\n","print(\"\\n▶ 테스트 정확도 비교 결과\")\n","print(f\"BatchNorm 미적용 모델 정확도: {plain_accuracy:.2f}%\")\n","print(f\"BatchNorm 적용 모델 정확도: {bn_accuracy:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlapNiN-R_Gx","executionInfo":{"status":"ok","timestamp":1744272365301,"user_tz":-540,"elapsed":69283,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}},"outputId":"f7359f80-c6ce-416a-d716-9b982c77d87a"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["▶ BatchNorm 미적용 모델 학습\n","Epoch [1/3] - Loss: 474.1012\n","Epoch [2/3] - Loss: 234.5732\n","Epoch [3/3] - Loss: 207.6484\n","\n","▶ BatchNorm 적용 모델 학습\n","Epoch [1/3] - Loss: 407.4432\n","Epoch [2/3] - Loss: 150.6820\n","Epoch [3/3] - Loss: 117.4838\n","\n","▶ 테스트 정확도 비교 결과\n","BatchNorm 미적용 모델 정확도: 90.55%\n","BatchNorm 적용 모델 정확도: 95.09%\n"]}]},{"cell_type":"markdown","source":["초기화 함수 정의"],"metadata":{"id":"chps1CLgZ8vj"}},{"cell_type":"code","source":["def initialize_weights(model, method='kaiming'):\n","    for m in model.modules():\n","        if isinstance(m, nn.Linear):\n","            if method == 'kaiming':\n","                nn.init.kaiming_normal_(m.weight, nonlinearity='relu')\n","            elif method == 'xavier':\n","                nn.init.xavier_normal_(m.weight)\n","            elif method == 'normal':\n","                nn.init.normal_(m.weight, mean=0.0, std=1.0)\n","            if m.bias is not None:\n","                nn.init.constant_(m.bias, 0)\n"],"metadata":{"id":"6iyCqta6Z-O8","executionInfo":{"status":"ok","timestamp":1744272422877,"user_tz":-540,"elapsed":43,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":91,"outputs":[]},{"cell_type":"markdown","source":["MLP 모델 정의"],"metadata":{"id":"EyCL4C0AZcYY"}},{"cell_type":"code","source":["class MLPModel(nn.Module):\n","    def __init__(self, activation_fn):\n","        super(MLPModel, self).__init__()\n","        self.model = nn.Sequential(\n","            nn.Flatten(),\n","            nn.Linear(28*28, 20),\n","            activation_fn(),\n","            nn.Linear(20, 20),\n","            activation_fn(),\n","            nn.Linear(20, 10)\n","        )\n","\n","    def forward(self, x):\n","        return self.model(x)\n"],"metadata":{"id":"LXgxlgcuaDkY","executionInfo":{"status":"ok","timestamp":1744272424647,"user_tz":-540,"elapsed":8,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":92,"outputs":[]},{"cell_type":"markdown","source":["학습 및 테스트 함수"],"metadata":{"id":"8VZztgH5aF9r"}},{"cell_type":"code","source":["def train_model(model, train_loader, optimizer, criterion, device, epochs=5):\n","    model.train()\n","    for epoch in range(epochs):\n","        running_loss = 0.0\n","        for images, labels in train_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","        print(f\"Epoch [{epoch+1}/{epochs}] - Loss: {loss.item():.4f}\")\n","\n","def test_model(model, test_loader, device):\n","    model.eval()\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","        for images, labels in test_loader:\n","            images, labels = images.to(device), labels.to(device)\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs, 1)\n","            correct += (predicted == labels).sum().item()\n","            total += labels.size(0)\n","    return 100 * correct / total\n"],"metadata":{"id":"8aX0wOi-aNwS","executionInfo":{"status":"ok","timestamp":1744272426047,"user_tz":-540,"elapsed":8,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}}},"execution_count":93,"outputs":[]},{"cell_type":"markdown","source":[" 4.  카이밍 초기화, 제이비어 초기화, 정규분포 초기화를 적용했을 때의 결과"],"metadata":{"id":"gDVjVx65aPlH"}},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","criterion = nn.CrossEntropyLoss()\n","\n","results = {}\n","\n","for init_method in ['kaiming', 'xavier', 'normal']:\n","    print(f\"\\n🔧 [{init_method.upper()} 초기화] 모델 학습 중...\")\n","    model = MLPModel(nn.ReLU).to(device)\n","    initialize_weights(model, method=init_method)\n","    optimizer = optim.Adam(model.parameters(), lr=0.001)\n","    train_model(model, train_loader, optimizer, criterion, device, epochs=3)\n","    acc = test_model(model, test_loader, device)\n","    results[init_method] = acc\n","\n","print(\"\\n▶ 초기화 방법별 테스트 정확도:\")\n","for method, acc in results.items():\n","    print(f\"{method.capitalize()} 초기화 정확도: {acc:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TOnBk7HwaUni","executionInfo":{"status":"ok","timestamp":1744272530658,"user_tz":-540,"elapsed":102458,"user":{"displayName":"나슈갬주식TV 실전투자 검색식","userId":"13048685361301152802"}},"outputId":"e2433422-e4e3-4b76-9242-87b69903f6c5"},"execution_count":94,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔧 [KAIMING 초기화] 모델 학습 중...\n","Epoch [1/3] - Loss: 0.4392\n","Epoch [2/3] - Loss: 0.0566\n","Epoch [3/3] - Loss: 0.1640\n","\n","🔧 [XAVIER 초기화] 모델 학습 중...\n","Epoch [1/3] - Loss: 0.2018\n","Epoch [2/3] - Loss: 0.9840\n","Epoch [3/3] - Loss: 0.0847\n","\n","🔧 [NORMAL 초기화] 모델 학습 중...\n","Epoch [1/3] - Loss: 2.5345\n","Epoch [2/3] - Loss: 3.0623\n","Epoch [3/3] - Loss: 2.3000\n","\n","▶ 초기화 방법별 테스트 정확도:\n","Kaiming 초기화 정확도: 91.53%\n","Xavier 초기화 정확도: 91.40%\n","Normal 초기화 정확도: 12.49%\n"]}]}]}